# -*- coding: utf-8 -*-
"""OpenCosmos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__ZmklMU_s4DOpCjQKwjnFJbmA3dTyMd
"""

from google.colab import drive
drive.mount('/content/drive')

#installing packages 
!pip install rasterio
!pip install geopandas
!pip install earthengine-api
!pip install request 
!pip install contextily 
!pip install skimage
!pip install genson
!pip install  json_schema_generator

import rasterio as rio
from rasterio import plot
import os
import sys
from matplotlib import pyplot as plt
import numpy as np 
import pandas as pd
from os import listdir
from os.path import join, isfile, isdir
from rasterio.plot import show_hist
from rasterio.plot import show
import ee
import json
import contextily as ctx
import geopandas as gpd
import fiona as fio
import skimage
from skimage import img_as_ubyte, exposure
from osgeo import gdal
from osgeo import ogr
import requests
import zipfile
import io

#initaiting Google earth engine api
!earthengine authenticate
ee.Initialize()

#setting work directory
wd = '/content/drive/MyDrive/open_cosmos'
os.chdir(wd)

print('My working directory has been changed to {}'.format(os.getcwd()))

#importing shapefile to use for area of interest (Lagos, Nigeria)
lagos_shpfl = join(wd, 'shapefile', 'Nigeria.geojson')

Nigeria = gpd.read_file(lagos_shpfl)
lagos = Nigeria[Nigeria['admin1Name'] == 'Lagos']
lagos.to_file(join(wd, 'lagos.json'), driver="GeoJSON")

lagos

lagos.columns[1]

lagos.iloc[:, 1].values[0]

lagos.plot()

#getting image bounding box from the shapefile
bbox = lagos.bounds
box = bbox.values.tolist()
box[0]

#creating image bounding box as ee polygon
listbb = [(box[0][0], box[0][1]), (box[0][0], box[0][3]), (box[0][2], box[0][3]), (box[0][2], box[0][1]), (box[0][0], box[0][1])]
aoi = ee.Geometry.Polygon(listbb)

#defining date, bands and satellite image (Sentinel 2) to use. 
date_range = ['2021-01-01', '2021-11-25']
bands = ['B4', 'B3', 'B2']
s2 = 'COPERNICUS/S2'

#getting image from Sentinel 2 satellite
imag = ee.ImageCollection(s2).filterBounds(aoi).filterDate(date_range[0], date_range[1])\
.filterMetadata('CLOUD_COVERAGE_ASSESSMENT', 'less_than', 20 ).first().select(bands)

masking = imag.eq(0) #making no value data transparent by masking. 
mask_image = imag.updateMask(masking)
band_name = mask_image.bandNames().getInfo() #extracting bands info

#to see if any data is available for the point at that date. 
if len(band_name) == 0: 
  print('no data')
else: print(band_name)

#checking list of metadata in the satellite and selecting the needed ones 
imag.propertyNames().getInfo()

#Creating list of metadata to extract
metalist = ['system:footprint', 'SPACECRAFT_NAME', 'system:id', 'DATATAKE_TYPE', 'CLOUD_COVERAGE_ASSESSMENT', 'GENERATION_TIME', 'system:time_start', 
 'system:time_end', 'CLOUDY_PIXEL_PERCENTAGE', 'PRODUCT_ID', 'system:asset_size', 
 'system:index', 'system:band_names', 'system:bands']

for i in metalist: 
  print(i + '.hh')

#creating download folder
downloaddir = join(wd, 'download')
os.makedirs(downloaddir, exist_ok=True)

#extracting the metadata and saving it 
for i in metalist: 
  metafile = str(i)
  metafile = json.dumps(imag.get(i).getInfo(), indent = 4) 
  with open(join(downloaddir, i +'.json'), 'w') as outfile: 
    outfile.write(metafile)

#getting Image download link
d_link = imag.getDownloadURL({
        'name': 'Image' + date_range[1].split('-')[0],
        'region':aoi,
        'scale': 100,
        'bands': bands
        })

d_link

#extracting image from online and unzipping it.
os.chdir(downloaddir)
result = requests.get(d_link, stream = True)
check = zipfile.is_zipfile(io.BytesIO(result.content))

if not check: 
  result = requests.get(d_link, stream = True)
  check = zipfile.is_zipfile(io.BytesIO(result.content))
else: 
  z = zipfile.ZipFile(io.BytesIO(result.content))
  z.extractall()

print("contents of ", downloaddir, ":")
!ls -l

imgfiles = [f for f in listdir(downloaddir) if isfile(join(downloaddir, f)) and (join(downloaddir, f)).endswith('tif')]
imgfiles

band2 = rio.open(imgfiles[2])
band3 = rio.open(imgfiles[1])
band4 = rio.open(imgfiles[0])

show(band3, cmap='Blues')
show(band2, cmap='Greens')
show(band4, cmap='Reds')

band3.dtypes

#stacking the three bands image together 
trueColour = rio.open(join(downloaddir, 'lag.tiff'),
                          'w',driver='Gtiff', width=band4.width, height=band4.height,
                          count=3, crs=band4.crs, transform=band4.transform, 
                          dtype=np.float64)
trueColour.write(band2.read(1), 3) #display Red reflectance as red colour on screen
trueColour.write(band3.read(1), 2) #display Green reflectance as green colour on screen
trueColour.write(band4.read(1), 1) #display Blue reflectance as blue colour on screen
trueColour.close()

# try plotting the image again
imgfile = rio.open(join(wd, 'lag.tiff'), count=3)
show(imgfile)

imgfile.meta

imgfile.count

#converting image to uint 8 (normalizing image) 
uint8img = img_as_ubyte( exposure.rescale_intensity(imgfile.read()))
show(uint8img)

trueColour = rio.open(join(downloaddir, 'laguint88.tiff'),
                          'w',driver='Gtiff', width=imgfile.width, height=imgfile.height,
                          count=3, crs=imgfile.crs, transform=imgfile.transform, 
                          dtype=np.uint8)
trueColour.write(uint8img)

uin8img = rio.open(join(wd, 'laguint88.tiff'))

uin8img.dtypes

#Did this to show how to upload on google drive from computer. 
from pydrive.drive import GoogleDrive
from pydrive.auth import GoogleAuth
   
# For using listdir()
import os
   
  

gauth = GoogleAuth()
  
# Creating local webserver and auto

gauth.LocalWebserverAuth()       
drive = GoogleDrive(gauth)
     
   
# iterating thought all the files/folder
# of the desired directory
for x in os.listdir(downloaddir):
   
    fil = drive.CreateFile({'title': 'x'})
    fil.SetContentFile(os.path.join(downloaddir, x))
    fil.Upload()
  

    fil = None

#Here is the link to the files 
https://drive.google.com/drive/folders/1-24V1NDjdLDsHeg6idmOFxp0TnmQ6rjo?usp=sharing
